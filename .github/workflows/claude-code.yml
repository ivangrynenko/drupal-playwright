name: Claude Code

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, edited, synchronize]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Prompt for Claude'
        required: true
        type: string

jobs:
  claude-code:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.body, '@claude')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install anthropic

      - name: Extract prompt from event
        id: extract_prompt
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "prompt=${{ github.event.inputs.prompt }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "issues" ]; then
            PROMPT=$(echo "${{ github.event.issue.body }}" | sed -n 's/.*@claude \(.*\)/\1/p')
            echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "issue_comment" ]; then
            PROMPT=$(echo "${{ github.event.comment.body }}" | sed -n 's/.*@claude \(.*\)/\1/p')
            echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            PROMPT=$(echo "${{ github.event.pull_request.body }}" | sed -n 's/.*@claude \(.*\)/\1/p')
            echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
            PROMPT=$(echo "${{ github.event.comment.body }}" | sed -n 's/.*@claude \(.*\)/\1/p')
            echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
          fi

      - name: Create Claude Script
        run: |
          cat > claude_code.py << 'EOF'
          import os
          import sys
          import anthropic
          import subprocess

          def run_command(cmd):
              result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
              return result.stdout, result.stderr, result.returncode

          def main():
              prompt = sys.argv[1] if len(sys.argv) > 1 else "Help improve this codebase"
              
              client = anthropic.Anthropic(api_key=os.environ.get("ANTHROPIC_API_KEY"))
              
              # Get current directory files
              stdout, _, _ = run_command("find . -type f -name '*.py' -o -name '*.yml' -o -name '*.md' -o -name '*.sh' | grep -v '.git' | head -20")
              files = stdout.strip().split('\n') if stdout else []
              
              context = f"I'm in a GitHub repository. Here are some key files:\n"
              for file in files[:10]:  # Limit to first 10 files
                  if file and os.path.exists(file):
                      with open(file, 'r') as f:
                          content = f.read()[:500]  # First 500 chars
                          context += f"\n{file}:\n{content}...\n"
              
              full_prompt = f"{context}\n\nUser request: {prompt}\n\nPlease provide specific code changes or improvements."
              
              message = client.messages.create(
                  model="claude-3-sonnet-20240229",
                  max_tokens=1000,
                  temperature=0,
                  messages=[{"role": "user", "content": full_prompt}]
              )
              
              print(message.content[0].text)

          if __name__ == "__main__":
              main()
          EOF

      - name: Run Claude Code
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Configure git
          git config --global user.email "claude-bot@github.com"
          git config --global user.name "Claude Code Bot"
          
          # Run Claude script
          python claude_code.py "${{ steps.extract_prompt.outputs.prompt }}" > claude_response.txt
          
          # For now, just save the response
          echo "Claude's response has been saved to claude_response.txt"
          
          # Create a simple implementation file based on the prompt
          echo "# Implementation based on: ${{ steps.extract_prompt.outputs.prompt }}" > implementation.md
          echo "" >> implementation.md
          echo "This is a placeholder implementation. The full Claude Code CLI integration is pending." >> implementation.md
          echo "" >> implementation.md
          cat claude_response.txt >> implementation.md

      - name: Check for changes
        id: check_changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.check_changes.outputs.changes == 'true' && github.event_name != 'pull_request'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: Claude Code automated changes"
          title: "Claude Code: ${{ steps.extract_prompt.outputs.prompt }}"
          body: |
            This PR was automatically created by Claude Code in response to:
            
            **Prompt**: ${{ steps.extract_prompt.outputs.prompt }}
            
            **Triggered by**: @${{ github.actor }}
            **Event**: ${{ github.event_name }}
            
            Please review the changes carefully.
          branch: claude-code-${{ github.run_number }}
          delete-branch: true

      - name: Push changes to PR branch
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'pull_request'
        run: |
          git add -A
          git commit -m "feat: Claude Code automated changes - ${{ steps.extract_prompt.outputs.prompt }}"
          git push origin HEAD:${{ github.head_ref }}

      - name: Comment on issue/PR
        if: github.event_name != 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const prompt = '${{ steps.extract_prompt.outputs.prompt }}';
            const hasChanges = '${{ steps.check_changes.outputs.changes }}' === 'true';
            
            let body = `## Claude Code Response\n\n`;
            body += `**Prompt**: ${prompt}\n\n`;
            
            if (hasChanges) {
              if ('${{ github.event_name }}' === 'pull_request') {
                body += `✅ Changes have been pushed to this PR branch.`;
              } else {
                body += `✅ A new pull request has been created with the requested changes.`;
              }
            } else {
              body += `ℹ️ No changes were needed based on your request.`;
            }
            
            if ('${{ github.event_name }}' === 'issues' || '${{ github.event_name }}' === 'issue_comment') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            } else if ('${{ github.event_name }}' === 'pull_request' || '${{ github.event_name }}' === 'pull_request_review_comment') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: body
              });
            }
name: Claude API Assistant

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Request for Claude'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  claude-assist:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.body, '@claude')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Anthropic SDK
        run: pip install anthropic

      - name: Extract prompt
        id: extract_prompt
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "prompt=${{ github.event.inputs.prompt }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "issues" ]; then
            PROMPT=$(echo "${{ github.event.issue.body }}" | sed -n 's/.*@claude \(.*\)/\1/p')
            echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "issue_comment" ]; then
            PROMPT=$(echo "${{ github.event.comment.body }}" | sed -n 's/.*@claude \(.*\)/\1/p')
            echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
          fi

      - name: Call Claude API
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python << 'EOF'
          import os
          import anthropic
          import json

          prompt = """${{ steps.extract_prompt.outputs.prompt }}"""
          
          client = anthropic.Anthropic(api_key=os.environ["ANTHROPIC_API_KEY"])
          
          message = client.messages.create(
              model="claude-3-sonnet-20240229",
              max_tokens=1000,
              temperature=0,
              messages=[{
                  "role": "user",
                  "content": f"You are helping with a Drupal Playwright testing integration project. User request: {prompt}"
              }]
          )
          
          response = message.content[0].text
          
          # Save response for the next step
          with open('claude_response.txt', 'w') as f:
              f.write(response)
          
          print("Claude response saved")
          EOF

      - name: Post response as comment
        if: github.event_name != 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const response = fs.readFileSync('claude_response.txt', 'utf8');
            
            const body = `## Claude's Response\n\n${response}\n\n---\n*This response was generated by Claude AI. Please review carefully before implementing.*`;
            
            if ('${{ github.event_name }}' === 'issues' || '${{ github.event_name }}' === 'issue_comment') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Display response (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "## Claude's Response"
          echo ""
          cat claude_response.txt